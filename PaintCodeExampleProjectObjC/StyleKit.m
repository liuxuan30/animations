//
//  StyleKit.m
//  Example
//
//  Created by  on 10.8.2015.
//  Copyright (c) 2015 PixelCut. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "StyleKit.h"


@implementation StyleKit

#pragma mark Cache

static UIImage* _imageOfBlueRect = nil;
static UIImage* _imageOfStore = nil;
static UIImage* _imageOfSoup = nil;
static UIImage* _imageOfTabBarBackground = nil;
static UIImage* _imageOfSelectionIndicator = nil;
static UIImage* _imageOfShadowImage = nil;
static UIImage* _imageOfProjectIcon = nil;

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawBlueRect
{
    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0.76 blue: 1 alpha: 1];
    CGFloat colorHSBA[4];
    [color getHue: &colorHSBA[0] saturation: &colorHSBA[1] brightness: &colorHSBA[2] alpha: &colorHSBA[3]];

    UIColor* darkColor = [UIColor colorWithHue: colorHSBA[0] saturation: colorHSBA[1] brightness: 0.6 alpha: colorHSBA[3]];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(7.5, 7.5, 50, 50) cornerRadius: 10];
    [color setFill];
    [rectanglePath fill];
    [darkColor setStroke];
    rectanglePath.lineWidth = 5;
    [rectanglePath stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(22.25, 21.75, 21, 21)];
    [UIColor.whiteColor setFill];
    [ovalPath fill];
    [darkColor setStroke];
    ovalPath.lineWidth = 0.5;
    [ovalPath stroke];
}

+ (void)drawBlueRectFramedWithFrame: (CGRect)frame
{
    //// Color Declarations
    UIColor* color = [UIColor colorWithRed: 0 green: 0.76 blue: 1 alpha: 1];
    CGFloat colorHSBA[4];
    [color getHue: &colorHSBA[0] saturation: &colorHSBA[1] brightness: &colorHSBA[2] alpha: &colorHSBA[3]];

    UIColor* darkColor = [UIColor colorWithHue: colorHSBA[0] saturation: colorHSBA[1] brightness: 0.6 alpha: colorHSBA[3]];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(CGRectGetMinX(frame) + 7.5, CGRectGetMinY(frame) + 7.5, CGRectGetWidth(frame) - 15, CGRectGetHeight(frame) - 15) cornerRadius: 10];
    [color setFill];
    [rectanglePath fill];
    [darkColor setStroke];
    rectanglePath.lineWidth = 5;
    [rectanglePath stroke];


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(CGRectGetMinX(frame) + 22.25, CGRectGetMinY(frame) + 21.75, CGRectGetWidth(frame) - 44, CGRectGetHeight(frame) - 44)];
    [UIColor.whiteColor setFill];
    [ovalPath fill];
    [darkColor setStroke];
    ovalPath.lineWidth = 0.5;
    [ovalPath stroke];
}

+ (void)drawStore
{

    //// Group
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPath];
        [ovalPath moveToPoint: CGPointMake(26.96, 13.68)];
        [ovalPath addCurveToPoint: CGPointMake(24.95, 8.76) controlPoint1: CGPointMake(27.19, 11.92) controlPoint2: CGPointMake(26.52, 10.1)];
        [ovalPath addCurveToPoint: CGPointMake(15.05, 8.76) controlPoint1: CGPointMake(22.22, 6.41) controlPoint2: CGPointMake(17.78, 6.41)];
        [ovalPath addCurveToPoint: CGPointMake(13.14, 14.19) controlPoint1: CGPointMake(13.33, 10.23) controlPoint2: CGPointMake(12.69, 12.28)];
        [UIColor.grayColor setStroke];
        ovalPath.lineWidth = 2;
        [ovalPath stroke];


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(23.99, 16.67)];
        [bezierPath addCurveToPoint: CGPointMake(21.53, 17.54) controlPoint1: CGPointMake(23.06, 16.67) controlPoint2: CGPointMake(22.24, 16.96)];
        [bezierPath addCurveToPoint: CGPointMake(20.01, 20.07) controlPoint1: CGPointMake(20.82, 18.12) controlPoint2: CGPointMake(20.31, 18.96)];
        [bezierPath addCurveToPoint: CGPointMake(16.05, 16.67) controlPoint1: CGPointMake(19.26, 17.8) controlPoint2: CGPointMake(17.94, 16.67)];
        [bezierPath addCurveToPoint: CGPointMake(13.54, 17.69) controlPoint1: CGPointMake(15.06, 16.67) controlPoint2: CGPointMake(14.22, 17.01)];
        [bezierPath addCurveToPoint: CGPointMake(12.51, 20.2) controlPoint1: CGPointMake(12.85, 18.37) controlPoint2: CGPointMake(12.51, 19.21)];
        [bezierPath addCurveToPoint: CGPointMake(12.84, 21.93) controlPoint1: CGPointMake(12.51, 20.79) controlPoint2: CGPointMake(12.62, 21.36)];
        [bezierPath addCurveToPoint: CGPointMake(13.03, 22.37) controlPoint1: CGPointMake(12.9, 22.08) controlPoint2: CGPointMake(12.96, 22.23)];
        [bezierPath addCurveToPoint: CGPointMake(14.64, 24.8) controlPoint1: CGPointMake(13.28, 22.89) controlPoint2: CGPointMake(13.82, 23.7)];
        [bezierPath addCurveToPoint: CGPointMake(15.69, 26.17) controlPoint1: CGPointMake(14.95, 25.21) controlPoint2: CGPointMake(15.3, 25.67)];
        [bezierPath addCurveToPoint: CGPointMake(18.74, 30.47) controlPoint1: CGPointMake(17.11, 28) controlPoint2: CGPointMake(18.13, 29.43)];
        [bezierPath addCurveToPoint: CGPointMake(20.01, 33.6) controlPoint1: CGPointMake(19.34, 31.51) controlPoint2: CGPointMake(19.77, 32.55)];
        [bezierPath addCurveToPoint: CGPointMake(24.54, 26.03) controlPoint1: CGPointMake(20.46, 31.74) controlPoint2: CGPointMake(21.97, 29.22)];
        [bezierPath addCurveToPoint: CGPointMake(26.77, 22.76) controlPoint1: CGPointMake(25.55, 24.8) controlPoint2: CGPointMake(26.29, 23.71)];
        [bezierPath addCurveToPoint: CGPointMake(27.49, 20.01) controlPoint1: CGPointMake(27.25, 21.81) controlPoint2: CGPointMake(27.49, 20.9)];
        [bezierPath addCurveToPoint: CGPointMake(26.43, 17.68) controlPoint1: CGPointMake(27.49, 19.13) controlPoint2: CGPointMake(27.14, 18.35)];
        [bezierPath addCurveToPoint: CGPointMake(23.99, 16.67) controlPoint1: CGPointMake(25.73, 17) controlPoint2: CGPointMake(24.92, 16.67)];
        [bezierPath closePath];
        [bezierPath moveToPoint: CGPointMake(34.5, 36.5)];
        [bezierPath addLineToPoint: CGPointMake(5.5, 36.5)];
        [bezierPath addLineToPoint: CGPointMake(7.5, 13.5)];
        [bezierPath addLineToPoint: CGPointMake(32.5, 13.5)];
        [bezierPath addLineToPoint: CGPointMake(34.5, 36.5)];
        [bezierPath closePath];
        [UIColor.grayColor setFill];
        [bezierPath fill];
        [UIColor.grayColor setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];
    }
}

+ (void)drawSoup
{

    //// Group
    {
        //// Cup Drawing
        UIBezierPath* cupPath = [UIBezierPath bezierPath];
        [cupPath moveToPoint: CGPointMake(22.96, 6.5)];
        [cupPath addCurveToPoint: CGPointMake(25, 10.2) controlPoint1: CGPointMake(22.95, 6.5) controlPoint2: CGPointMake(25, 6.91)];
        [cupPath addCurveToPoint: CGPointMake(22.55, 15.14) controlPoint1: CGPointMake(25, 11.85) controlPoint2: CGPointMake(22.55, 13.08)];
        [cupPath addCurveToPoint: CGPointMake(22.55, 19.25) controlPoint1: CGPointMake(22.55, 17.61) controlPoint2: CGPointMake(22.55, 19.25)];
        [cupPath addCurveToPoint: CGPointMake(20.91, 15.14) controlPoint1: CGPointMake(22.55, 19.25) controlPoint2: CGPointMake(20.91, 16.78)];
        [cupPath addCurveToPoint: CGPointMake(23.36, 10.2) controlPoint1: CGPointMake(20.91, 12.67) controlPoint2: CGPointMake(22.95, 12.05)];
        [cupPath addCurveToPoint: CGPointMake(22.95, 6.5) controlPoint1: CGPointMake(23.77, 8.35) controlPoint2: CGPointMake(22.95, 6.5)];
        [cupPath addLineToPoint: CGPointMake(22.96, 6.5)];
        [cupPath closePath];
        [UIColor.grayColor setFill];
        [cupPath fill];


        //// Cup 2 Drawing
        UIBezierPath* cup2Path = [UIBezierPath bezierPath];
        [cup2Path moveToPoint: CGPointMake(17.07, 7.32)];
        [cup2Path addCurveToPoint: CGPointMake(19.09, 11.03) controlPoint1: CGPointMake(17.05, 7.32) controlPoint2: CGPointMake(18.99, 7.22)];
        [cup2Path addCurveToPoint: CGPointMake(17.45, 16.78) controlPoint1: CGPointMake(19.12, 12.15) controlPoint2: CGPointMake(17.45, 14.32)];
        [cup2Path addCurveToPoint: CGPointMake(18.27, 21.72) controlPoint1: CGPointMake(17.45, 19.25) controlPoint2: CGPointMake(18.27, 21.72)];
        [cup2Path addCurveToPoint: CGPointMake(15.82, 16.78) controlPoint1: CGPointMake(18.27, 21.72) controlPoint2: CGPointMake(15.82, 19.25)];
        [cup2Path addCurveToPoint: CGPointMake(17.45, 11.03) controlPoint1: CGPointMake(15.82, 14.32) controlPoint2: CGPointMake(17.05, 12.88)];
        [cup2Path addCurveToPoint: CGPointMake(17.05, 7.32) controlPoint1: CGPointMake(17.86, 9.17) controlPoint2: CGPointMake(17.05, 7.32)];
        [cup2Path addLineToPoint: CGPointMake(17.07, 7.32)];
        [cup2Path closePath];
        [UIColor.grayColor setFill];
        [cup2Path fill];


        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPath];
        [ovalPath moveToPoint: CGPointMake(5, 22)];
        [ovalPath addCurveToPoint: CGPointMake(9.39, 32.61) controlPoint1: CGPointMake(4.97, 25.88) controlPoint2: CGPointMake(6.43, 29.65)];
        [ovalPath addCurveToPoint: CGPointMake(30.61, 32.61) controlPoint1: CGPointMake(15.25, 38.46) controlPoint2: CGPointMake(24.75, 38.46)];
        [ovalPath addCurveToPoint: CGPointMake(35, 21.99) controlPoint1: CGPointMake(33.54, 29.68) controlPoint2: CGPointMake(35, 25.84)];
        [ovalPath addLineToPoint: CGPointMake(5, 22)];
        [ovalPath closePath];
        [UIColor.grayColor setFill];
        [ovalPath fill];
    }
}

+ (void)drawTabBarBackground
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* backgroundTop = [UIColor colorWithRed: 0.2 green: 0.2 blue: 0.2 alpha: 1];
    CGFloat backgroundTopRGBA[4];
    [backgroundTop getRed: &backgroundTopRGBA[0] green: &backgroundTopRGBA[1] blue: &backgroundTopRGBA[2] alpha: &backgroundTopRGBA[3]];

    UIColor* backgroundBottom = [UIColor colorWithRed: (backgroundTopRGBA[0] * 0.5) green: (backgroundTopRGBA[1] * 0.5) blue: (backgroundTopRGBA[2] * 0.5) alpha: (backgroundTopRGBA[3] * 0.5 + 0.5)];

    //// Gradient Declarations
    CGFloat tabBarGradientLocations[] = {0, 1};
    CGGradientRef tabBarGradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)backgroundTop.CGColor, (id)backgroundBottom.CGColor], tabBarGradientLocations);

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 40, 40)];
    CGContextSaveGState(context);
    [rectanglePath addClip];
    CGContextDrawLinearGradient(context, tabBarGradient, CGPointMake(20, -0), CGPointMake(20, 40), 0);
    CGContextRestoreGState(context);


    //// Cleanup
    CGGradientRelease(tabBarGradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawSelectionIndicator
{
    //// Color Declarations
    UIColor* tabBarSelectionColor = [UIColor colorWithRed: 0 green: 0 blue: 0 alpha: 0.6];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(0, 0, 40, 40) cornerRadius: 4];
    [tabBarSelectionColor setFill];
    [rectanglePath fill];
}

+ (void)drawShadowImage
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Shadow Declarations
    NSShadow* tabBarShadow = [[NSShadow alloc] init];
    [tabBarShadow setShadowColor: [UIColor.blackColor colorWithAlphaComponent: 0.76]];
    [tabBarShadow setShadowOffset: CGSizeMake(0.1, -0.1)];
    [tabBarShadow setShadowBlurRadius: 5];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(-4, 8, 48, 2)];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, tabBarShadow.shadowOffset, tabBarShadow.shadowBlurRadius, [tabBarShadow.shadowColor CGColor]);
    [UIColor.grayColor setFill];
    [rectanglePath fill];
    CGContextRestoreGState(context);
}

+ (void)drawButtonWithSelected: (BOOL)selected highlighted: (BOOL)highlighted
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* buttonSelected = [UIColor colorWithRed: 0.867 green: 0.404 blue: 0.341 alpha: 1];
    CGFloat buttonSelectedRGBA[4];
    [buttonSelected getRed: &buttonSelectedRGBA[0] green: &buttonSelectedRGBA[1] blue: &buttonSelectedRGBA[2] alpha: &buttonSelectedRGBA[3]];

    UIColor* buttonStrokeSelected = [UIColor colorWithRed: (buttonSelectedRGBA[0] * 0.7) green: (buttonSelectedRGBA[1] * 0.7) blue: (buttonSelectedRGBA[2] * 0.7) alpha: (buttonSelectedRGBA[3] * 0.7 + 0.3)];
    UIColor* buttonNormal = [UIColor colorWithRed: 0.496 green: 0.859 blue: 0.612 alpha: 1];
    CGFloat buttonNormalRGBA[4];
    [buttonNormal getRed: &buttonNormalRGBA[0] green: &buttonNormalRGBA[1] blue: &buttonNormalRGBA[2] alpha: &buttonNormalRGBA[3]];

    UIColor* buttonStrokeNormal = [UIColor colorWithRed: (buttonNormalRGBA[0] * 0.8) green: (buttonNormalRGBA[1] * 0.8) blue: (buttonNormalRGBA[2] * 0.8) alpha: (buttonNormalRGBA[3] * 0.8 + 0.2)];

    //// Variable Declarations
    UIColor* buttonFill = selected ? buttonSelected : buttonNormal;
    UIColor* buttonStroke = selected ? buttonStrokeSelected : buttonStrokeNormal;

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(1, 1, 119, 29) cornerRadius: 5];
    [buttonFill setFill];
    [rectanglePath fill];
    [buttonStroke setStroke];
    rectanglePath.lineWidth = 2;
    [rectanglePath stroke];


    if (highlighted)
    {
        //// Group 2
        {
            CGContextSaveGState(context);
            CGContextSetBlendMode(context, kCGBlendModeColorBurn);
            CGContextBeginTransparencyLayer(context, NULL);


            //// Rectangle 2 Drawing
            UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(1, 1, 119, 29) cornerRadius: 5];
            [UIColor.lightGrayColor setFill];
            [rectangle2Path fill];
            [UIColor.lightGrayColor setStroke];
            rectangle2Path.lineWidth = 2;
            [rectangle2Path stroke];


            CGContextEndTransparencyLayer(context);
            CGContextRestoreGState(context);
        }
    }
}

+ (void)drawBagWithBagColor: (UIColor*)bagColor
{
    //// Color Declarations
    CGFloat bagColorRGBA[4];
    [bagColor getRed: &bagColorRGBA[0] green: &bagColorRGBA[1] blue: &bagColorRGBA[2] alpha: &bagColorRGBA[3]];

    UIColor* heartColor = [UIColor colorWithRed: (bagColorRGBA[0] * 0.5 + 0.5) green: (bagColorRGBA[1] * 0.5 + 0.5) blue: (bagColorRGBA[2] * 0.5 + 0.5) alpha: (bagColorRGBA[3] * 0.5 + 0.5)];

    //// Group
    {
        //// Oval Drawing
        UIBezierPath* ovalPath = [UIBezierPath bezierPath];
        [ovalPath moveToPoint: CGPointMake(45.71, 17.11)];
        [ovalPath addCurveToPoint: CGPointMake(42.05, 8.19) controlPoint1: CGPointMake(46.13, 13.93) controlPoint2: CGPointMake(44.91, 10.62)];
        [ovalPath addCurveToPoint: CGPointMake(23.95, 8.19) controlPoint1: CGPointMake(37.05, 3.94) controlPoint2: CGPointMake(28.95, 3.94)];
        [ovalPath addCurveToPoint: CGPointMake(20.46, 18.03) controlPoint1: CGPointMake(20.81, 10.86) controlPoint2: CGPointMake(19.64, 14.58)];
        [bagColor setStroke];
        ovalPath.lineWidth = 2;
        [ovalPath stroke];


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(59.5, 58.5)];
        [bezierPath addLineToPoint: CGPointMake(6.5, 58.5)];
        [bezierPath addLineToPoint: CGPointMake(10.16, 16.79)];
        [bezierPath addLineToPoint: CGPointMake(55.84, 16.79)];
        [bezierPath addLineToPoint: CGPointMake(59.5, 58.5)];
        [bezierPath closePath];
        [bagColor setFill];
        [bezierPath fill];
        [bagColor setStroke];
        bezierPath.lineWidth = 1;
        [bezierPath stroke];
    }


    //// Group 2
    {
        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(40.29, 22.53)];
        [bezier2Path addCurveToPoint: CGPointMake(35.8, 24.11) controlPoint1: CGPointMake(38.6, 22.53) controlPoint2: CGPointMake(37.1, 23.06)];
        [bezier2Path addCurveToPoint: CGPointMake(33.03, 28.7) controlPoint1: CGPointMake(34.5, 25.16) controlPoint2: CGPointMake(33.57, 26.69)];
        [bezier2Path addCurveToPoint: CGPointMake(25.79, 22.53) controlPoint1: CGPointMake(31.66, 24.59) controlPoint2: CGPointMake(29.24, 22.53)];
        [bezier2Path addCurveToPoint: CGPointMake(21.19, 24.39) controlPoint1: CGPointMake(23.97, 22.53) controlPoint2: CGPointMake(22.44, 23.15)];
        [bezier2Path addCurveToPoint: CGPointMake(19.32, 28.95) controlPoint1: CGPointMake(19.94, 25.62) controlPoint2: CGPointMake(19.32, 27.14)];
        [bezier2Path addCurveToPoint: CGPointMake(19.91, 32.08) controlPoint1: CGPointMake(19.32, 30.01) controlPoint2: CGPointMake(19.51, 31.05)];
        [bezier2Path addCurveToPoint: CGPointMake(20.27, 32.88) controlPoint1: CGPointMake(20.02, 32.35) controlPoint2: CGPointMake(20.13, 32.61)];
        [bezier2Path addCurveToPoint: CGPointMake(23.2, 37.28) controlPoint1: CGPointMake(20.72, 33.81) controlPoint2: CGPointMake(21.7, 35.28)];
        [bezier2Path addCurveToPoint: CGPointMake(25.12, 39.77) controlPoint1: CGPointMake(23.76, 38.03) controlPoint2: CGPointMake(24.4, 38.86)];
        [bezier2Path addCurveToPoint: CGPointMake(30.69, 47.56) controlPoint1: CGPointMake(27.72, 43.08) controlPoint2: CGPointMake(29.58, 45.67)];
        [bezier2Path addCurveToPoint: CGPointMake(33.03, 53.25) controlPoint1: CGPointMake(31.8, 49.45) controlPoint2: CGPointMake(32.58, 51.34)];
        [bezier2Path addCurveToPoint: CGPointMake(41.29, 39.52) controlPoint1: CGPointMake(33.85, 49.87) controlPoint2: CGPointMake(36.6, 45.3)];
        [bezier2Path addCurveToPoint: CGPointMake(45.38, 33.58) controlPoint1: CGPointMake(43.14, 37.28) controlPoint2: CGPointMake(44.5, 35.3)];
        [bezier2Path addCurveToPoint: CGPointMake(46.68, 28.6) controlPoint1: CGPointMake(46.25, 31.86) controlPoint2: CGPointMake(46.68, 30.2)];
        [bezier2Path addCurveToPoint: CGPointMake(44.76, 24.36) controlPoint1: CGPointMake(46.68, 26.99) controlPoint2: CGPointMake(46.04, 25.58)];
        [bezier2Path addCurveToPoint: CGPointMake(40.29, 22.53) controlPoint1: CGPointMake(43.48, 23.14) controlPoint2: CGPointMake(41.99, 22.53)];
        [bezier2Path closePath];
        [heartColor setFill];
        [bezier2Path fill];
        [bagColor setStroke];
        bezier2Path.lineWidth = 1;
        [bezier2Path stroke];
    }
}

+ (void)drawLiveButtonWithLiveButtonColor: (UIColor*)liveButtonColor radius: (CGFloat)radius strokeWidth: (CGFloat)strokeWidth
{
    //// Color Declarations
    CGFloat liveButtonColorRGBA[4];
    [liveButtonColor getRed: &liveButtonColorRGBA[0] green: &liveButtonColorRGBA[1] blue: &liveButtonColorRGBA[2] alpha: &liveButtonColorRGBA[3]];

    UIColor* liveButtonColorDark = [UIColor colorWithRed: (liveButtonColorRGBA[0] * 0.5) green: (liveButtonColorRGBA[1] * 0.5) blue: (liveButtonColorRGBA[2] * 0.5) alpha: (liveButtonColorRGBA[3] * 0.5 + 0.5)];

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(10.5, 10.5, 80, 80) cornerRadius: radius];
    [liveButtonColor setFill];
    [rectanglePath fill];
    [liveButtonColorDark setStroke];
    rectanglePath.lineWidth = strokeWidth;
    [rectanglePath stroke];
}

+ (void)drawClockWithWatchColor: (UIColor*)watchColor hrs: (CGFloat)hrs mins: (CGFloat)mins secs: (CGFloat)secs
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Shadow Declarations
    NSShadow* handShadow = [[NSShadow alloc] init];
    [handShadow setShadowColor: UIColor.blackColor];
    [handShadow setShadowOffset: CGSizeMake(0.1, -0.1)];
    [handShadow setShadowBlurRadius: 1];

    //// Variable Declarations
    CGFloat hrsAngle = -360 * (fmod(hrs, 12)) / 12.0;
    CGFloat minsAngle = -360 * (fmod(mins, 60)) / 60.0;
    CGFloat secsVal = 199 * secs / 60.0;
    CGFloat secsAngle = -360 * secs / 60.0;

    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(9.5, 8.5, 79, 79) cornerRadius: 13];
    [UIColor.blackColor setFill];
    [rectangle2Path fill];
    [UIColor.blackColor setStroke];
    rectangle2Path.lineWidth = 4.5;
    [rectangle2Path stroke];


    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(9.5, 8.5, 79, 79) cornerRadius: 13];
    [UIColor.blackColor setFill];
    [rectanglePath fill];
    [watchColor setStroke];
    rectanglePath.lineWidth = 4;
    [rectanglePath stroke];


    //// Oval 2 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 49, 48);
    CGContextRotateCTM(context, -90 * M_PI / 180);

    UIBezierPath* oval2Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-31.5, -31.5, 63, 63)];
    [watchColor setStroke];
    oval2Path.lineWidth = 2;
    CGFloat oval2Pattern[] = {secsVal, 199};
    [oval2Path setLineDash: oval2Pattern count: 2 phase: 1];
    [oval2Path stroke];

    CGContextRestoreGState(context);


    //// handHrs
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 49, 48);
        CGContextRotateCTM(context, -hrsAngle * M_PI / 180);



        //// Bezier Drawing
        CGContextSaveGState(context);

        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(-0, 0)];
        [bezierPath addLineToPoint: CGPointMake(-0, -24)];
        [UIColor.blackColor setFill];
        [bezierPath fill];
        [UIColor.whiteColor setStroke];
        bezierPath.lineWidth = 4;
        [bezierPath stroke];

        CGContextRestoreGState(context);



        CGContextRestoreGState(context);
    }


    //// handMins
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 49, 48);
        CGContextRotateCTM(context, -minsAngle * M_PI / 180);

        CGContextSetShadowWithColor(context, handShadow.shadowOffset, handShadow.shadowBlurRadius, [handShadow.shadowColor CGColor]);
        CGContextBeginTransparencyLayer(context, NULL);


        //// Bezier 2 Drawing
        CGContextSaveGState(context);

        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(-0, 0)];
        [bezier2Path addLineToPoint: CGPointMake(-0, -26)];
        CGContextSaveGState(context);
        CGContextSetShadowWithColor(context, handShadow.shadowOffset, handShadow.shadowBlurRadius, [handShadow.shadowColor CGColor]);
        [UIColor.blackColor setFill];
        [bezier2Path fill];
        CGContextRestoreGState(context);

        [UIColor.whiteColor setStroke];
        bezier2Path.lineWidth = 2;
        [bezier2Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);

        CGContextRestoreGState(context);
    }


    //// Oval Drawing
    UIBezierPath* ovalPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(46.5, 45.5, 5, 5)];
    [UIColor.blackColor setFill];
    [ovalPath fill];
    [UIColor.whiteColor setStroke];
    ovalPath.lineWidth = 1;
    [ovalPath stroke];


    //// Oval 3 Drawing
    CGContextSaveGState(context);
    CGContextTranslateCTM(context, 49, 48);
    CGContextRotateCTM(context, -secsAngle * M_PI / 180);

    UIBezierPath* oval3Path = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(-2.5, -34, 5, 5)];
    [UIColor.blackColor setFill];
    [oval3Path fill];
    [watchColor setStroke];
    oval3Path.lineWidth = 1;
    [oval3Path stroke];

    CGContextRestoreGState(context);
}

+ (void)drawApertureWithApertureValue: (CGFloat)apertureValue
{
    //// General Declarations
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color4 = [UIColor colorWithRed: 0.123 green: 0.468 blue: 0.72 alpha: 1];

    //// Variable Declarations
    CGFloat angle = 90 * apertureValue / 3.0;

    //// Group
    {
        CGContextSaveGState(context);
        CGContextBeginTransparencyLayer(context, NULL);

        //// Clip mask
        UIBezierPath* maskPath = [UIBezierPath bezierPathWithOvalInRect: CGRectMake(12, 12, 156, 156)];
        [maskPath addClip];


        //// o 8 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 146.58, 33.43);
        CGContextRotateCTM(context, -angle * M_PI / 180);

        CGRect o8Rect = CGRectMake(-136.58, -23.43, 160, 160);
        UIBezierPath* o8Path = [UIBezierPath bezierPath];
        [o8Path addArcWithCenter: CGPointMake(CGRectGetMidX(o8Rect), CGRectGetMidY(o8Rect)) radius: CGRectGetWidth(o8Rect) / 2 startAngle: 315 * M_PI/180 endAngle: 0 * M_PI/180 clockwise: YES];
        [o8Path addLineToPoint: CGPointMake(CGRectGetMidX(o8Rect), CGRectGetMidY(o8Rect))];
        [o8Path closePath];

        [color4 setFill];
        [o8Path fill];
        [UIColor.whiteColor setStroke];
        o8Path.lineWidth = 3;
        [o8Path stroke];

        CGContextRestoreGState(context);


        //// o 6 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 90, 10);
        CGContextRotateCTM(context, -angle * M_PI / 180);

        CGRect o6Rect = CGRectMake(-80, 0, 160, 160);
        UIBezierPath* o6Path = [UIBezierPath bezierPath];
        [o6Path addArcWithCenter: CGPointMake(CGRectGetMidX(o6Rect), CGRectGetMidY(o6Rect)) radius: CGRectGetWidth(o6Rect) / 2 startAngle: -90 * M_PI/180 endAngle: -45 * M_PI/180 clockwise: YES];
        [o6Path addLineToPoint: CGPointMake(CGRectGetMidX(o6Rect), CGRectGetMidY(o6Rect))];
        [o6Path closePath];

        [color4 setFill];
        [o6Path fill];
        [UIColor.whiteColor setStroke];
        o6Path.lineWidth = 3;
        [o6Path stroke];

        CGContextRestoreGState(context);


        //// o 5 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 33.44, 33.43);
        CGContextRotateCTM(context, -angle * M_PI / 180);

        CGRect o5Rect = CGRectMake(-23.44, -23.43, 160, 160);
        UIBezierPath* o5Path = [UIBezierPath bezierPath];
        [o5Path addArcWithCenter: CGPointMake(CGRectGetMidX(o5Rect), CGRectGetMidY(o5Rect)) radius: CGRectGetWidth(o5Rect) / 2 startAngle: -135 * M_PI/180 endAngle: -90 * M_PI/180 clockwise: YES];
        [o5Path addLineToPoint: CGPointMake(CGRectGetMidX(o5Rect), CGRectGetMidY(o5Rect))];
        [o5Path closePath];

        [color4 setFill];
        [o5Path fill];
        [UIColor.whiteColor setStroke];
        o5Path.lineWidth = 3;
        [o5Path stroke];

        CGContextRestoreGState(context);


        //// o 4 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 10, 90);
        CGContextRotateCTM(context, -angle * M_PI / 180);

        CGRect o4Rect = CGRectMake(0, -80, 160, 160);
        UIBezierPath* o4Path = [UIBezierPath bezierPath];
        [o4Path addArcWithCenter: CGPointMake(CGRectGetMidX(o4Rect), CGRectGetMidY(o4Rect)) radius: CGRectGetWidth(o4Rect) / 2 startAngle: -180 * M_PI/180 endAngle: -135 * M_PI/180 clockwise: YES];
        [o4Path addLineToPoint: CGPointMake(CGRectGetMidX(o4Rect), CGRectGetMidY(o4Rect))];
        [o4Path closePath];

        [color4 setFill];
        [o4Path fill];
        [UIColor.whiteColor setStroke];
        o4Path.lineWidth = 3;
        [o4Path stroke];

        CGContextRestoreGState(context);


        //// o 3 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 33.4, 146.56);
        CGContextRotateCTM(context, -angle * M_PI / 180);

        CGRect o3Rect = CGRectMake(-23.4, -136.56, 160, 160);
        UIBezierPath* o3Path = [UIBezierPath bezierPath];
        [o3Path addArcWithCenter: CGPointMake(CGRectGetMidX(o3Rect), CGRectGetMidY(o3Rect)) radius: CGRectGetWidth(o3Rect) / 2 startAngle: 135 * M_PI/180 endAngle: -180 * M_PI/180 clockwise: YES];
        [o3Path addLineToPoint: CGPointMake(CGRectGetMidX(o3Rect), CGRectGetMidY(o3Rect))];
        [o3Path closePath];

        [color4 setFill];
        [o3Path fill];
        [UIColor.whiteColor setStroke];
        o3Path.lineWidth = 3;
        [o3Path stroke];

        CGContextRestoreGState(context);


        //// o 2 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 90, 170);
        CGContextRotateCTM(context, -angle * M_PI / 180);

        CGRect o2Rect = CGRectMake(-80, -160, 160, 160);
        UIBezierPath* o2Path = [UIBezierPath bezierPath];
        [o2Path addArcWithCenter: CGPointMake(CGRectGetMidX(o2Rect), CGRectGetMidY(o2Rect)) radius: CGRectGetWidth(o2Rect) / 2 startAngle: -270 * M_PI/180 endAngle: -225 * M_PI/180 clockwise: YES];
        [o2Path addLineToPoint: CGPointMake(CGRectGetMidX(o2Rect), CGRectGetMidY(o2Rect))];
        [o2Path closePath];

        [color4 setFill];
        [o2Path fill];
        [UIColor.whiteColor setStroke];
        o2Path.lineWidth = 3;
        [o2Path stroke];

        CGContextRestoreGState(context);


        //// o1 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 146.54, 146.6);
        CGContextRotateCTM(context, -angle * M_PI / 180);

        CGRect o1Rect = CGRectMake(-136.54, -136.6, 160, 160);
        UIBezierPath* o1Path = [UIBezierPath bezierPath];
        [o1Path addArcWithCenter: CGPointMake(CGRectGetMidX(o1Rect), CGRectGetMidY(o1Rect)) radius: CGRectGetWidth(o1Rect) / 2 startAngle: 45 * M_PI/180 endAngle: 90 * M_PI/180 clockwise: YES];
        [o1Path addLineToPoint: CGPointMake(CGRectGetMidX(o1Rect), CGRectGetMidY(o1Rect))];
        [o1Path closePath];

        [color4 setFill];
        [o1Path fill];
        [UIColor.whiteColor setStroke];
        o1Path.lineWidth = 3;
        [o1Path stroke];

        CGContextRestoreGState(context);


        //// o0 Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 170, 90);
        CGContextRotateCTM(context, -angle * M_PI / 180);

        CGRect o0Rect = CGRectMake(-160, -80, 160, 160);
        UIBezierPath* o0Path = [UIBezierPath bezierPath];
        [o0Path addArcWithCenter: CGPointMake(CGRectGetMidX(o0Rect), CGRectGetMidY(o0Rect)) radius: CGRectGetWidth(o0Rect) / 2 startAngle: 360 * M_PI/180 endAngle: 45 * M_PI/180 clockwise: YES];
        [o0Path addLineToPoint: CGPointMake(CGRectGetMidX(o0Rect), CGRectGetMidY(o0Rect))];
        [o0Path closePath];

        [color4 setFill];
        [o0Path fill];
        [UIColor.whiteColor setStroke];
        o0Path.lineWidth = 3;
        [o0Path stroke];

        CGContextRestoreGState(context);


        CGContextEndTransparencyLayer(context);
        CGContextRestoreGState(context);
    }
}

+ (void)drawProjectIcon
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();

    //// Color Declarations
    UIColor* color3 = [UIColor colorWithRed: 0.039 green: 0.498 blue: 0.98 alpha: 1];
    UIColor* color5 = [UIColor colorWithRed: 0.345 green: 0.776 blue: 0.98 alpha: 1];

    //// Gradient Declarations
    CGFloat gradientLocations[] = {0, 1};
    CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)color5.CGColor, (id)color3.CGColor], gradientLocations);

    //// Group
    {
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 10.27, 27.15);
        CGContextScaleCTM(context, 0.5, 0.5);



        //// Rectangle Drawing
        CGContextSaveGState(context);
        CGContextTranslateCTM(context, 0, 66.07);
        CGContextRotateCTM(context, -9 * M_PI / 180);

        UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRect: CGRectMake(0, 0, 422.35, 339.43)];
        CGContextSaveGState(context);
        [rectanglePath addClip];
        CGContextDrawLinearGradient(context, gradient, CGPointMake(211.17, 0), CGPointMake(211.17, 339.43), 0);
        CGContextRestoreGState(context);

        CGContextRestoreGState(context);


        //// Bezier Drawing
        UIBezierPath* bezierPath = [UIBezierPath bezierPath];
        [bezierPath moveToPoint: CGPointMake(21.24, 79.18)];
        [bezierPath addLineToPoint: CGPointMake(402.24, 19.18)];
        [bezierPath addLineToPoint: CGPointMake(452.24, 321.18)];
        [bezierPath addLineToPoint: CGPointMake(67.24, 383.18)];
        [bezierPath addLineToPoint: CGPointMake(21.24, 79.18)];
        [bezierPath closePath];
        [UIColor.whiteColor setStroke];
        bezierPath.lineWidth = 3;
        [bezierPath stroke];


        //// Bezier 18 Drawing
        UIBezierPath* bezier18Path = [UIBezierPath bezierPath];
        [bezier18Path moveToPoint: CGPointMake(232.51, 67.22)];
        [bezier18Path addCurveToPoint: CGPointMake(228.01, 62.72) controlPoint1: CGPointMake(232.51, 64.74) controlPoint2: CGPointMake(230.49, 62.72)];
        [bezier18Path addCurveToPoint: CGPointMake(223.51, 67.22) controlPoint1: CGPointMake(225.52, 62.72) controlPoint2: CGPointMake(223.51, 64.74)];
        [bezier18Path addCurveToPoint: CGPointMake(228.01, 71.72) controlPoint1: CGPointMake(223.51, 69.71) controlPoint2: CGPointMake(225.52, 71.72)];
        [bezier18Path addCurveToPoint: CGPointMake(232.51, 67.22) controlPoint1: CGPointMake(230.49, 71.72) controlPoint2: CGPointMake(232.51, 69.71)];
        [bezier18Path closePath];
        [bezier18Path moveToPoint: CGPointMake(208.52, 85.32)];
        [bezier18Path addCurveToPoint: CGPointMake(204.02, 80.82) controlPoint1: CGPointMake(208.52, 82.84) controlPoint2: CGPointMake(206.5, 80.82)];
        [bezier18Path addCurveToPoint: CGPointMake(199.52, 85.32) controlPoint1: CGPointMake(201.53, 80.82) controlPoint2: CGPointMake(199.52, 82.84)];
        [bezier18Path addCurveToPoint: CGPointMake(204.02, 89.82) controlPoint1: CGPointMake(199.52, 87.81) controlPoint2: CGPointMake(201.53, 89.82)];
        [bezier18Path addCurveToPoint: CGPointMake(208.52, 85.32) controlPoint1: CGPointMake(206.5, 89.82) controlPoint2: CGPointMake(208.52, 87.81)];
        [bezier18Path closePath];
        [bezier18Path moveToPoint: CGPointMake(215.94, 63.26)];
        [bezier18Path addCurveToPoint: CGPointMake(211.44, 67.76) controlPoint1: CGPointMake(215.94, 65.75) controlPoint2: CGPointMake(213.92, 67.76)];
        [bezier18Path addCurveToPoint: CGPointMake(209.21, 67.17) controlPoint1: CGPointMake(210.63, 67.76) controlPoint2: CGPointMake(209.87, 67.55)];
        [bezier18Path addCurveToPoint: CGPointMake(209.65, 69.12) controlPoint1: CGPointMake(209.5, 67.76) controlPoint2: CGPointMake(209.65, 68.42)];
        [bezier18Path addCurveToPoint: CGPointMake(205.15, 73.62) controlPoint1: CGPointMake(209.65, 71.61) controlPoint2: CGPointMake(207.64, 73.62)];
        [bezier18Path addCurveToPoint: CGPointMake(200.65, 69.12) controlPoint1: CGPointMake(202.67, 73.62) controlPoint2: CGPointMake(200.65, 71.61)];
        [bezier18Path addCurveToPoint: CGPointMake(203.3, 65.02) controlPoint1: CGPointMake(200.65, 67.3) controlPoint2: CGPointMake(201.74, 65.73)];
        [bezier18Path addCurveToPoint: CGPointMake(205.15, 64.62) controlPoint1: CGPointMake(203.87, 64.76) controlPoint2: CGPointMake(204.5, 64.62)];
        [bezier18Path addCurveToPoint: CGPointMake(207.38, 65.21) controlPoint1: CGPointMake(205.96, 64.62) controlPoint2: CGPointMake(206.72, 64.84)];
        [bezier18Path addCurveToPoint: CGPointMake(206.94, 63.26) controlPoint1: CGPointMake(207.1, 64.62) controlPoint2: CGPointMake(206.94, 63.96)];
        [bezier18Path addCurveToPoint: CGPointMake(209.36, 59.27) controlPoint1: CGPointMake(206.94, 61.53) controlPoint2: CGPointMake(207.92, 60.02)];
        [bezier18Path addCurveToPoint: CGPointMake(211.44, 58.76) controlPoint1: CGPointMake(209.98, 58.94) controlPoint2: CGPointMake(210.69, 58.76)];
        [bezier18Path addCurveToPoint: CGPointMake(215.94, 63.26) controlPoint1: CGPointMake(213.92, 58.76) controlPoint2: CGPointMake(215.94, 60.77)];
        [bezier18Path closePath];
        [bezier18Path moveToPoint: CGPointMake(207.29, 109.65)];
        [bezier18Path addCurveToPoint: CGPointMake(209.9, 108.04) controlPoint1: CGPointMake(207.93, 108.86) controlPoint2: CGPointMake(208.85, 108.27)];
        [bezier18Path addCurveToPoint: CGPointMake(210.84, 107.95) controlPoint1: CGPointMake(210.2, 107.98) controlPoint2: CGPointMake(210.52, 107.95)];
        [bezier18Path addCurveToPoint: CGPointMake(215.34, 112.45) controlPoint1: CGPointMake(213.32, 107.95) controlPoint2: CGPointMake(215.34, 109.96)];
        [bezier18Path addCurveToPoint: CGPointMake(210.84, 116.95) controlPoint1: CGPointMake(215.34, 114.93) controlPoint2: CGPointMake(213.32, 116.95)];
        [bezier18Path addCurveToPoint: CGPointMake(206.34, 112.45) controlPoint1: CGPointMake(208.35, 116.95) controlPoint2: CGPointMake(206.34, 114.93)];
        [bezier18Path addCurveToPoint: CGPointMake(202.79, 114.15) controlPoint1: CGPointMake(205.51, 113.47) controlPoint2: CGPointMake(204.23, 114.15)];
        [bezier18Path addCurveToPoint: CGPointMake(198.29, 109.65) controlPoint1: CGPointMake(200.3, 114.15) controlPoint2: CGPointMake(198.29, 112.13)];
        [bezier18Path addCurveToPoint: CGPointMake(201.93, 105.23) controlPoint1: CGPointMake(198.29, 107.46) controlPoint2: CGPointMake(199.85, 105.63)];
        [bezier18Path addCurveToPoint: CGPointMake(202.79, 105.15) controlPoint1: CGPointMake(202.21, 105.18) controlPoint2: CGPointMake(202.49, 105.15)];
        [bezier18Path addCurveToPoint: CGPointMake(207.29, 109.65) controlPoint1: CGPointMake(205.27, 105.15) controlPoint2: CGPointMake(207.29, 107.16)];
        [bezier18Path closePath];
        [bezier18Path moveToPoint: CGPointMake(221.88, 128.7)];
        [bezier18Path addCurveToPoint: CGPointMake(217.38, 124.2) controlPoint1: CGPointMake(221.88, 126.21) controlPoint2: CGPointMake(219.86, 124.2)];
        [bezier18Path addCurveToPoint: CGPointMake(212.88, 128.7) controlPoint1: CGPointMake(214.89, 124.2) controlPoint2: CGPointMake(212.88, 126.21)];
        [bezier18Path addCurveToPoint: CGPointMake(217.38, 133.2) controlPoint1: CGPointMake(212.88, 131.19) controlPoint2: CGPointMake(214.89, 133.2)];
        [bezier18Path addCurveToPoint: CGPointMake(221.88, 128.7) controlPoint1: CGPointMake(219.86, 133.2) controlPoint2: CGPointMake(221.88, 131.19)];
        [bezier18Path closePath];
        [bezier18Path moveToPoint: CGPointMake(190.41, 117.74)];
        [bezier18Path addCurveToPoint: CGPointMake(185.91, 113.24) controlPoint1: CGPointMake(190.41, 115.26) controlPoint2: CGPointMake(188.4, 113.24)];
        [bezier18Path addCurveToPoint: CGPointMake(181.41, 117.74) controlPoint1: CGPointMake(183.43, 113.24) controlPoint2: CGPointMake(181.41, 115.26)];
        [bezier18Path addCurveToPoint: CGPointMake(185.91, 122.24) controlPoint1: CGPointMake(181.41, 120.23) controlPoint2: CGPointMake(183.43, 122.24)];
        [bezier18Path addCurveToPoint: CGPointMake(190.41, 117.74) controlPoint1: CGPointMake(188.4, 122.24) controlPoint2: CGPointMake(190.41, 120.23)];
        [bezier18Path closePath];
        [UIColor.whiteColor setStroke];
        bezier18Path.lineWidth = 1;
        [bezier18Path stroke];


        //// Bezier 4 Drawing
        UIBezierPath* bezier4Path = [UIBezierPath bezierPath];
        [bezier4Path moveToPoint: CGPointMake(197.19, 107.85)];
        [bezier4Path addCurveToPoint: CGPointMake(206.22, 110.64) controlPoint1: CGPointMake(199.79, 108.05) controlPoint2: CGPointMake(201.94, 108.91)];
        [bezier4Path addLineToPoint: CGPointMake(206.84, 110.89)];
        [bezier4Path addCurveToPoint: CGPointMake(214.94, 114.91) controlPoint1: CGPointMake(211.12, 112.62) controlPoint2: CGPointMake(213.26, 113.49)];
        [bezier4Path addLineToPoint: CGPointMake(215.28, 115.15)];
        [bezier4Path addCurveToPoint: CGPointMake(218.51, 122.76) controlPoint1: CGPointMake(217.42, 117.09) controlPoint2: CGPointMake(218.61, 119.87)];
        [bezier4Path addCurveToPoint: CGPointMake(215.71, 131.79) controlPoint1: CGPointMake(218.3, 125.36) controlPoint2: CGPointMake(217.44, 127.5)];
        [bezier4Path addLineToPoint: CGPointMake(209.59, 146.94)];
        [bezier4Path addLineToPoint: CGPointMake(179.21, 134.66)];
        [bezier4Path addLineToPoint: CGPointMake(185.33, 119.51)];
        [bezier4Path addCurveToPoint: CGPointMake(189.34, 111.41) controlPoint1: CGPointMake(187.06, 115.23) controlPoint2: CGPointMake(187.92, 113.09)];
        [bezier4Path addLineToPoint: CGPointMake(189.58, 111.07)];
        [bezier4Path addCurveToPoint: CGPointMake(197.19, 107.85) controlPoint1: CGPointMake(191.52, 108.93) controlPoint2: CGPointMake(194.3, 107.74)];
        [bezier4Path closePath];
        [bezier4Path moveToPoint: CGPointMake(387.73, 163.85)];
        [bezier4Path addCurveToPoint: CGPointMake(392.73, 192.85) controlPoint1: CGPointMake(387.73, 163.85) controlPoint2: CGPointMake(392.73, 192.85)];
        [bezier4Path addLineToPoint: CGPointMake(352.71, 199.2)];
        [bezier4Path addLineToPoint: CGPointMake(330.05, 173.07)];
        [bezier4Path addLineToPoint: CGPointMake(387.73, 163.85)];
        [bezier4Path addLineToPoint: CGPointMake(387.73, 163.85)];
        [bezier4Path closePath];
        [bezier4Path moveToPoint: CGPointMake(222.74, 62.1)];
        [bezier4Path addCurveToPoint: CGPointMake(228.81, 68.12) controlPoint1: CGPointMake(224.74, 63.35) controlPoint2: CGPointMake(226.1, 64.94)];
        [bezier4Path addLineToPoint: CGPointMake(330.72, 187.2)];
        [bezier4Path addLineToPoint: CGPointMake(306.62, 207.84)];
        [bezier4Path addCurveToPoint: CGPointMake(226.44, 112.48) controlPoint1: CGPointMake(306.62, 207.84) controlPoint2: CGPointMake(255.97, 147.59)];
        [bezier4Path addCurveToPoint: CGPointMake(205.72, 87.84) controlPoint1: CGPointMake(214.29, 98.03) controlPoint2: CGPointMake(205.72, 87.84)];
        [bezier4Path addCurveToPoint: CGPointMake(200.9, 81.23) controlPoint1: CGPointMake(203.01, 84.66) controlPoint2: CGPointMake(201.65, 83.07)];
        [bezier4Path addLineToPoint: CGPointMake(200.73, 80.89)];
        [bezier4Path addCurveToPoint: CGPointMake(201.32, 73.44) controlPoint1: CGPointMake(199.81, 78.44) controlPoint2: CGPointMake(200.03, 75.71)];
        [bezier4Path addCurveToPoint: CGPointMake(207.34, 67.36) controlPoint1: CGPointMake(202.57, 71.44) controlPoint2: CGPointMake(204.16, 70.08)];
        [bezier4Path addLineToPoint: CGPointMake(208.34, 66.51)];
        [bezier4Path addCurveToPoint: CGPointMake(214.95, 61.68) controlPoint1: CGPointMake(211.52, 63.79) controlPoint2: CGPointMake(213.11, 62.43)];
        [bezier4Path addLineToPoint: CGPointMake(215.28, 61.51)];
        [bezier4Path addCurveToPoint: CGPointMake(222.74, 62.1) controlPoint1: CGPointMake(217.73, 60.6) controlPoint2: CGPointMake(220.46, 60.81)];
        [bezier4Path closePath];
        [bezier4Path moveToPoint: CGPointMake(274.72, 181.88)];
        [bezier4Path addCurveToPoint: CGPointMake(296.41, 208.01) controlPoint1: CGPointMake(274.71, 181.88) controlPoint2: CGPointMake(296.41, 208.01)];
        [bezier4Path addLineToPoint: CGPointMake(185.73, 225.85)];
        [bezier4Path addLineToPoint: CGPointMake(197.55, 193.82)];
        [bezier4Path addLineToPoint: CGPointMake(274.71, 181.88)];
        [bezier4Path addLineToPoint: CGPointMake(274.72, 181.88)];
        [bezier4Path closePath];
        [bezier4Path moveToPoint: CGPointMake(334.72, 192.28)];
        [bezier4Path addCurveToPoint: CGPointMake(355.65, 216.7) controlPoint1: CGPointMake(334.72, 192.28) controlPoint2: CGPointMake(355.65, 216.7)];
        [bezier4Path addLineToPoint: CGPointMake(331.23, 237.35)];
        [bezier4Path addLineToPoint: CGPointMake(310.83, 212.72)];
        [bezier4Path addCurveToPoint: CGPointMake(312.55, 211.25) controlPoint1: CGPointMake(310.86, 212.69) controlPoint2: CGPointMake(312.55, 211.25)];
        [bezier4Path addLineToPoint: CGPointMake(334.69, 192.31)];
        [bezier4Path addLineToPoint: CGPointMake(334.72, 192.28)];
        [bezier4Path closePath];
        [bezier4Path moveToPoint: CGPointMake(144.63, 202.2)];
        [bezier4Path addCurveToPoint: CGPointMake(131.24, 235.02) controlPoint1: CGPointMake(144.63, 202.19) controlPoint2: CGPointMake(131.24, 235.02)];
        [bezier4Path addLineToPoint: CGPointMake(89.33, 241.52)];
        [bezier4Path addLineToPoint: CGPointMake(84.73, 211.85)];
        [bezier4Path addLineToPoint: CGPointMake(144.63, 202.19)];
        [bezier4Path addLineToPoint: CGPointMake(144.63, 202.2)];
        [bezier4Path closePath];
        [bezier4Path moveToPoint: CGPointMake(176.86, 141.3)];
        [bezier4Path addCurveToPoint: CGPointMake(206.84, 152.87) controlPoint1: CGPointMake(176.86, 141.3) controlPoint2: CGPointMake(206.84, 152.87)];
        [bezier4Path addLineToPoint: CGPointMake(153.74, 282.38)];
        [bezier4Path addLineToPoint: CGPointMake(123.61, 270.94)];
        [bezier4Path addLineToPoint: CGPointMake(176.86, 141.3)];
        [bezier4Path addLineToPoint: CGPointMake(176.86, 141.3)];
        [bezier4Path closePath];
        [bezier4Path moveToPoint: CGPointMake(366.98, 226.98)];
        [bezier4Path addCurveToPoint: CGPointMake(389.98, 265.7) controlPoint1: CGPointMake(371.69, 230.41) controlPoint2: CGPointMake(388.01, 243.17)];
        [bezier4Path addCurveToPoint: CGPointMake(386.54, 292.36) controlPoint1: CGPointMake(391.95, 288.24) controlPoint2: CGPointMake(386.54, 292.36)];
        [bezier4Path addCurveToPoint: CGPointMake(376.51, 279.06) controlPoint1: CGPointMake(386.54, 292.36) controlPoint2: CGPointMake(381.39, 282.97)];
        [bezier4Path addCurveToPoint: CGPointMake(362.69, 271.52) controlPoint1: CGPointMake(371.63, 275.15) controlPoint2: CGPointMake(367.01, 273.07)];
        [bezier4Path addCurveToPoint: CGPointMake(352.31, 266.05) controlPoint1: CGPointMake(358.36, 269.97) controlPoint2: CGPointMake(354.99, 267.61)];
        [bezier4Path addCurveToPoint: CGPointMake(345.54, 259.79) controlPoint1: CGPointMake(349.62, 264.49) controlPoint2: CGPointMake(345.54, 259.79)];
        [bezier4Path addCurveToPoint: CGPointMake(338.2, 247.95) controlPoint1: CGPointMake(345.54, 259.79) controlPoint2: CGPointMake(339.66, 251.05)];
        [bezier4Path addCurveToPoint: CGPointMake(341.52, 237.95) controlPoint1: CGPointMake(336.75, 244.86) controlPoint2: CGPointMake(337.64, 241.06)];
        [bezier4Path addCurveToPoint: CGPointMake(354.16, 227.41) controlPoint1: CGPointMake(345.39, 234.84) controlPoint2: CGPointMake(351.53, 229.89)];
        [bezier4Path addCurveToPoint: CGPointMake(366.98, 226.98) controlPoint1: CGPointMake(356.79, 224.94) controlPoint2: CGPointMake(362.27, 223.54)];
        [bezier4Path closePath];
        [bezier4Path moveToPoint: CGPointMake(120.66, 278.26)];
        [bezier4Path addCurveToPoint: CGPointMake(150.73, 289.85) controlPoint1: CGPointMake(120.66, 278.26) controlPoint2: CGPointMake(150.73, 289.85)];
        [bezier4Path addLineToPoint: CGPointMake(114.73, 335.85)];
        [bezier4Path addLineToPoint: CGPointMake(120.66, 278.26)];
        [bezier4Path addLineToPoint: CGPointMake(120.66, 278.26)];
        [bezier4Path closePath];
        [UIColor.whiteColor setStroke];
        bezier4Path.lineWidth = 3;
        [bezier4Path stroke];


        //// Bezier 3 Drawing
        UIBezierPath* bezier3Path = [UIBezierPath bezierPath];
        [bezier3Path moveToPoint: CGPointMake(180.41, 131.68)];
        [bezier3Path addLineToPoint: CGPointMake(104.27, 317.4)];
        [bezier3Path moveToPoint: CGPointMake(209.57, 146.15)];
        [bezier3Path addLineToPoint: CGPointMake(135.27, 327.52)];
        [bezier3Path moveToPoint: CGPointMake(147.59, 195.16)];
        [bezier3Path addLineToPoint: CGPointMake(129.14, 240.19)];
        [bezier3Path moveToPoint: CGPointMake(83.23, 204.35)];
        [bezier3Path addLineToPoint: CGPointMake(90.67, 248.99)];
        [bezier3Path moveToPoint: CGPointMake(121.89, 262.99)];
        [bezier3Path addLineToPoint: CGPointMake(114.17, 343.21)];
        [bezier3Path moveToPoint: CGPointMake(160.52, 277.69)];
        [bezier3Path addLineToPoint: CGPointMake(110.02, 341.6)];
        [bezier3Path moveToPoint: CGPointMake(116.23, 276.35)];
        [bezier3Path addLineToPoint: CGPointMake(157.83, 292.47)];
        [bezier3Path moveToPoint: CGPointMake(116.23, 268.35)];
        [bezier3Path addLineToPoint: CGPointMake(163.24, 285.9)];
        [bezier3Path moveToPoint: CGPointMake(336.65, 243.51)];
        [bezier3Path addLineToPoint: CGPointMake(187.41, 65.57)];
        [bezier3Path moveToPoint: CGPointMake(408.93, 279.47)];
        [bezier3Path addLineToPoint: CGPointMake(215.39, 51.93)];
        [bezier3Path moveToPoint: CGPointMake(210.43, 74.73)];
        [bezier3Path addLineToPoint: CGPointMake(200.07, 62.68)];
        [bezier3Path moveToPoint: CGPointMake(216.43, 68.73)];
        [bezier3Path addLineToPoint: CGPointMake(206.84, 57.38)];
        [bezier3Path moveToPoint: CGPointMake(207.23, 77.35)];
        [bezier3Path addLineToPoint: CGPointMake(190.72, 74.74)];
        [bezier3Path moveToPoint: CGPointMake(220.23, 67.35)];
        [bezier3Path addCurveToPoint: CGPointMake(223.08, 53.09) controlPoint1: CGPointMake(221.23, 64.35) controlPoint2: CGPointMake(223.08, 53.09)];
        [bezier3Path moveToPoint: CGPointMake(223.23, 70.35)];
        [bezier3Path addLineToPoint: CGPointMake(234.92, 61.61)];
        [bezier3Path moveToPoint: CGPointMake(211.23, 79.35)];
        [bezier3Path addLineToPoint: CGPointMake(198.88, 89.19)];
        [bezier3Path moveToPoint: CGPointMake(178.23, 115.35)];
        [bezier3Path addLineToPoint: CGPointMake(192.99, 120.83)];
        [bezier3Path moveToPoint: CGPointMake(208.23, 125.35)];
        [bezier3Path addLineToPoint: CGPointMake(225.03, 132.1)];
        [bezier3Path moveToPoint: CGPointMake(196.23, 117.35)];
        [bezier3Path addLineToPoint: CGPointMake(187.81, 101.24)];
        [bezier3Path moveToPoint: CGPointMake(200.23, 116.35)];
        [bezier3Path addLineToPoint: CGPointMake(205.92, 102.44)];
        [bezier3Path moveToPoint: CGPointMake(207.23, 119.35)];
        [bezier3Path addCurveToPoint: CGPointMake(212.82, 107.13) controlPoint1: CGPointMake(210.23, 114.35) controlPoint2: CGPointMake(212.82, 107.13)];
        [bezier3Path moveToPoint: CGPointMake(211.23, 121.35)];
        [bezier3Path addLineToPoint: CGPointMake(226.13, 116.38)];
        [bezier3Path moveToPoint: CGPointMake(173.23, 132.35)];
        [bezier3Path addLineToPoint: CGPointMake(216.06, 149.56)];
        [bezier3Path moveToPoint: CGPointMake(170.13, 138.47)];
        [bezier3Path addLineToPoint: CGPointMake(211.7, 154.87)];
        [bezier3Path moveToPoint: CGPointMake(408.64, 190.15)];
        [bezier3Path addLineToPoint: CGPointMake(79.33, 243.27)];
        [bezier3Path moveToPoint: CGPointMake(74.03, 213.21)];
        [bezier3Path addCurveToPoint: CGPointMake(406.9, 160.91) controlPoint1: CGPointMake(84.03, 212.21) controlPoint2: CGPointMake(406.9, 160.91)];
        [bezier3Path moveToPoint: CGPointMake(202.23, 181.35)];
        [bezier3Path addLineToPoint: CGPointMake(180.68, 239.12)];
        [bezier3Path moveToPoint: CGPointMake(366.91, 216.79)];
        [bezier3Path addLineToPoint: CGPointMake(331.06, 246.71)];
        [bezier3Path moveToPoint: CGPointMake(366.2, 207.68)];
        [bezier3Path addLineToPoint: CGPointMake(326.21, 241.56)];
        [bezier3Path moveToPoint: CGPointMake(386.23, 153.35)];
        [bezier3Path addLineToPoint: CGPointMake(394.46, 202.52)];
        [bezier3Path moveToPoint: CGPointMake(266.23, 171.35)];
        [bezier3Path addLineToPoint: CGPointMake(304.86, 218.47)];
        [bezier3Path moveToPoint: CGPointMake(324.44, 166.69)];
        [bezier3Path addLineToPoint: CGPointMake(358.2, 205.62)];
        [bezier3Path moveToPoint: CGPointMake(335.5, 182.7)];
        [bezier3Path addLineToPoint: CGPointMake(302.01, 211.68)];
        [bezier3Path moveToPoint: CGPointMake(340.04, 187.6)];
        [bezier3Path addLineToPoint: CGPointMake(301.01, 220.68)];
        [bezier3Path moveToPoint: CGPointMake(77.23, 381.35)];
        [bezier3Path addLineToPoint: CGPointMake(60.76, 384.79)];
        [bezier3Path moveToPoint: CGPointMake(22.23, 83.35)];
        [bezier3Path addLineToPoint: CGPointMake(20.41, 71.48)];
        [bezier3Path moveToPoint: CGPointMake(30.23, 78.35)];
        [bezier3Path addLineToPoint: CGPointMake(13.54, 80.83)];
        [bezier3Path moveToPoint: CGPointMake(402.23, 20.35)];
        [bezier3Path addLineToPoint: CGPointMake(400.87, 11.64)];
        [bezier3Path moveToPoint: CGPointMake(395.23, 20.35)];
        [bezier3Path addLineToPoint: CGPointMake(409.48, 18.48)];
        [bezier3Path moveToPoint: CGPointMake(447.23, 322.35)];
        [bezier3Path addLineToPoint: CGPointMake(460.33, 320.77)];
        [bezier3Path moveToPoint: CGPointMake(452.23, 319.35)];
        [bezier3Path addCurveToPoint: CGPointMake(453.14, 330.52) controlPoint1: CGPointMake(452.23, 319.35) controlPoint2: CGPointMake(453.14, 330.69)];
        [bezier3Path moveToPoint: CGPointMake(217.23, 128.35)];
        [bezier3Path addLineToPoint: CGPointMake(223.92, 111.53)];
        [bezier3Path moveToPoint: CGPointMake(187.47, 114.95)];
        [bezier3Path addLineToPoint: CGPointMake(195, 98.11)];
        [bezier3Path moveToPoint: CGPointMake(61.73, 353.85)];
        [bezier3Path addLineToPoint: CGPointMake(446.73, 291.85)];
        [bezier3Path moveToPoint: CGPointMake(68.23, 382.35)];
        [bezier3Path addLineToPoint: CGPointMake(68.11, 391.46)];
        [UIColor.whiteColor setStroke];
        bezier3Path.lineWidth = 1;
        [bezier3Path stroke];


        //// Bezier 2 Drawing
        UIBezierPath* bezier2Path = [UIBezierPath bezierPath];
        [bezier2Path moveToPoint: CGPointMake(307.78, 206.94)];
        [bezier2Path addLineToPoint: CGPointMake(312.24, 212.1)];
        [UIColor.whiteColor setStroke];
        bezier2Path.lineWidth = 3;
        [bezier2Path stroke];


        //// Bezier 5 Drawing
        UIBezierPath* bezier5Path = [UIBezierPath bezierPath];
        [bezier5Path moveToPoint: CGPointMake(330.06, 188.42)];
        [bezier5Path addLineToPoint: CGPointMake(334.52, 193.59)];
        [UIColor.whiteColor setStroke];
        bezier5Path.lineWidth = 3;
        [bezier5Path stroke];



        CGContextRestoreGState(context);
    }


    //// Cleanup
    CGGradientRelease(gradient);
    CGColorSpaceRelease(colorSpace);
}

#pragma mark Generated Images

+ (UIImage*)imageOfBlueRect
{
    if (_imageOfBlueRect)
        return _imageOfBlueRect;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(65, 65), NO, 0.0f);
    [StyleKit drawBlueRect];

    _imageOfBlueRect = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfBlueRect;
}

+ (UIImage*)imageOfBlueRectFramedWithFrame: (CGRect)frame
{
    UIGraphicsBeginImageContextWithOptions(frame.size, NO, 0.0f);
    [StyleKit drawBlueRectFramedWithFrame: CGRectMake(0, 0, frame.size.width, frame.size.height)];

    UIImage* imageOfBlueRectFramed = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfBlueRectFramed;
}

+ (UIImage*)imageOfStore
{
    if (_imageOfStore)
        return _imageOfStore;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [StyleKit drawStore];

    _imageOfStore = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return _imageOfStore;
}

+ (UIImage*)imageOfSoup
{
    if (_imageOfSoup)
        return _imageOfSoup;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [StyleKit drawSoup];

    _imageOfSoup = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysTemplate];
    UIGraphicsEndImageContext();

    return _imageOfSoup;
}

+ (UIImage*)imageOfTabBarBackground
{
    if (_imageOfTabBarBackground)
        return _imageOfTabBarBackground;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [StyleKit drawTabBarBackground];

    _imageOfTabBarBackground = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return _imageOfTabBarBackground;
}

+ (UIImage*)imageOfSelectionIndicator
{
    if (_imageOfSelectionIndicator)
        return _imageOfSelectionIndicator;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 40), NO, 0.0f);
    [StyleKit drawSelectionIndicator];

    _imageOfSelectionIndicator = [UIGraphicsGetImageFromCurrentImageContext() resizableImageWithCapInsets: UIEdgeInsetsMake(4, 4, 4, 4) resizingMode: UIImageResizingModeStretch];
    UIGraphicsEndImageContext();

    return _imageOfSelectionIndicator;
}

+ (UIImage*)imageOfShadowImage
{
    if (_imageOfShadowImage)
        return _imageOfShadowImage;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(40, 8), NO, 0.0f);
    [StyleKit drawShadowImage];

    _imageOfShadowImage = [UIGraphicsGetImageFromCurrentImageContext() resizableImageWithCapInsets: UIEdgeInsetsMake(0, 3, 0, 1) resizingMode: UIImageResizingModeTile];
    UIGraphicsEndImageContext();

    return _imageOfShadowImage;
}

+ (UIImage*)imageOfButtonWithSelected: (BOOL)selected highlighted: (BOOL)highlighted
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(121, 31), NO, 0.0f);
    [StyleKit drawButtonWithSelected: selected highlighted: highlighted];

    UIImage* imageOfButton = [[UIGraphicsGetImageFromCurrentImageContext() resizableImageWithCapInsets: UIEdgeInsetsMake(6, 6, 6, 6) resizingMode: UIImageResizingModeStretch] imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return imageOfButton;
}

+ (UIImage*)imageOfBagWithBagColor: (UIColor*)bagColor
{
    UIGraphicsBeginImageContextWithOptions(CGSizeMake(65, 65), NO, 0.0f);
    [StyleKit drawBagWithBagColor: bagColor];

    UIImage* imageOfBag = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();

    return imageOfBag;
}

+ (UIImage*)imageOfProjectIcon
{
    if (_imageOfProjectIcon)
        return _imageOfProjectIcon;

    UIGraphicsBeginImageContextWithOptions(CGSizeMake(256, 256), NO, 0.0f);
    [StyleKit drawProjectIcon];

    _imageOfProjectIcon = [UIGraphicsGetImageFromCurrentImageContext() imageWithRenderingMode: UIImageRenderingModeAlwaysOriginal];
    UIGraphicsEndImageContext();

    return _imageOfProjectIcon;
}

#pragma mark Customization Infrastructure

- (void)setBlueRectTargets: (NSArray*)blueRectTargets
{
    _blueRectTargets = blueRectTargets;

    for (id target in self.blueRectTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfBlueRect];
}

- (void)setStoreTargets: (NSArray*)storeTargets
{
    _storeTargets = storeTargets;

    for (id target in self.storeTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfStore];
}

- (void)setSoupTargets: (NSArray*)soupTargets
{
    _soupTargets = soupTargets;

    for (id target in self.soupTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfSoup];
}

- (void)setTabBarBackgroundTargets: (NSArray*)tabBarBackgroundTargets
{
    _tabBarBackgroundTargets = tabBarBackgroundTargets;

    for (id target in self.tabBarBackgroundTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfTabBarBackground];
}

- (void)setSelectionIndicatorTargets: (NSArray*)selectionIndicatorTargets
{
    _selectionIndicatorTargets = selectionIndicatorTargets;

    for (id target in self.selectionIndicatorTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfSelectionIndicator];
}

- (void)setShadowImageTargets: (NSArray*)shadowImageTargets
{
    _shadowImageTargets = shadowImageTargets;

    for (id target in self.shadowImageTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfShadowImage];
}

- (void)setProjectIconTargets: (NSArray*)projectIconTargets
{
    _projectIconTargets = projectIconTargets;

    for (id target in self.projectIconTargets)
        [target performSelector: @selector(setImage:) withObject: StyleKit.imageOfProjectIcon];
}


@end
